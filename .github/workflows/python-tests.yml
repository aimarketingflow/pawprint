name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libqt6gui6 libxkbcommon-x11-0 libxcb-icccm4 \
        libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
        libxcb-shape0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 \
        tshark xvfb
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install --cask xquartz
        brew install wireshark
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov pytest-qt pytest-xvfb
        
    - name: Set up virtual display on Linux
      if: runner.os == 'Linux'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
    
    - name: Run tests with diagnostic mode
      run: |
        python -m pytest tests/ --verbose --cov=. --cov-report=xml
        
    - name: Generate test report
      if: success() || failure()
      run: |
        python -c "
        import datetime, os
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f'test_report_{timestamp}.md'
        with open(report_file, 'w') as f:
            f.write('# Test Results Report\\n\\n')
            f.write(f'Generated: {datetime.datetime.now().isoformat()}\\n\\n')
            f.write(f'Python Version: {os.environ.get(\"PYTHON_VERSION\")}\\n')
            f.write(f'OS: {os.environ.get(\"RUNNER_OS\")}\\n\\n')
            f.write('## Test Summary\\n\\n')
        print(f'Created report: {report_file}')
        "
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
